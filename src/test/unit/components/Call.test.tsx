import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import Call from '@/pages/Call';

// –ú–æ–∫–∞–µ–º useAuth
const mockUseAuth = {
  user: { id: 1, name: 'Test User', email: 'test@example.com' },
  login: vi.fn(),
  logout: vi.fn(),
  register: vi.fn(),
  loading: false
};

// –ú–æ–∫–∞–µ–º useCall
const mockStartSearch = vi.fn();
const mockEndCall = vi.fn();
const mockToggleMute = vi.fn();
const mockToggleSpeaker = vi.fn();
const mockLikePartner = vi.fn();
const mockPassPartner = vi.fn();

const mockUseCall = {
  callState: {
    status: 'idle',
    searchTime: 0,
    duration: 0,
    isMuted: false,
    isSpeakerOn: false,
    partner: null
  },
  startSearch: mockStartSearch,
  endCall: mockEndCall,
  toggleMute: mockToggleMute,
  toggleSpeaker: mockToggleSpeaker,
  likePartner: mockLikePartner,
  passPartner: mockPassPartner
};

// –ú–æ–∫–∞–µ–º useMobile
const mockUseMobile = {
  isMobile: false
};

// –ú–æ–∫–∞–µ–º useNavigate
const mockNavigate = vi.fn();

vi.mock('@/contexts/AuthContext', () => ({
  useAuth: () => mockUseAuth
}));

vi.mock('@/contexts/CallContext', () => ({
  useCall: () => mockUseCall
}));

vi.mock('@/hooks/useMobile', () => ({
  useMobile: () => mockUseMobile
}));

vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom');
  return {
    ...actual,
    useNavigate: () => mockNavigate
  };
});

// –ú–æ–∫–∞–µ–º MobileCallInterface
vi.mock('@/components/MobileCallInterface', () => ({
  default: () => <div data-testid="mobile-call-interface">Mobile Call Interface</div>
}));

const renderCall = () => {
  return render(
    <BrowserRouter>
      <Call />
    </BrowserRouter>
  );
};

describe('Call Component', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ idle
    mockUseCall.callState = {
      status: 'idle',
      searchTime: 0,
      duration: 0,
      isMuted: false,
      isSpeakerOn: false,
      partner: null
    };
  });

  describe('Idle State', () => {
    it('renders idle state correctly', () => {
      renderCall();
      
      expect(screen.getByText('–ì–æ—Ç–æ–≤—ã –∫ –∑–≤–æ–Ω–∫—É?')).toBeInTheDocument();
      expect(screen.getByText('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: /–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫/i })).toBeInTheDocument();
    });

    it('calls startSearch when start button is clicked', () => {
      renderCall();
      
      const startButton = screen.getByRole('button', { name: /–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫/i });
      fireEvent.click(startButton);
      
      expect(mockStartSearch).toHaveBeenCalledTimes(1);
    });
  });

  describe('Searching State', () => {
    beforeEach(() => {
      mockUseCall.callState = {
        ...mockUseCall.callState,
        status: 'searching',
        searchTime: 45
      };
    });

    it('renders searching state correctly', () => {
      renderCall();
      
      expect(screen.getByText('–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')).toBeInTheDocument();
      expect(screen.getByText('–ü–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...')).toBeInTheDocument();
      expect(screen.getByText('–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: 00:45')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: /–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫/i })).toBeInTheDocument();
    });

    it('navigates to settings when cancel button is clicked', () => {
      renderCall();
      
      const cancelButton = screen.getByRole('button', { name: /–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫/i });
      fireEvent.click(cancelButton);
      
      expect(mockNavigate).toHaveBeenCalledWith('/settings');
    });
  });

  describe('Connecting State', () => {
    beforeEach(() => {
      mockUseCall.callState = {
        ...mockUseCall.callState,
        status: 'connecting',
        partner: {
          id: 2,
          name: 'Jane',
          age: 25,
          gender: 'female',
          interests: ['–º—É–∑—ã–∫–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è']
        }
      };
    });

    it('renders connecting state correctly', () => {
      renderCall();
      
      expect(screen.getByText('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')).toBeInTheDocument();
      expect(screen.getByText('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Jane')).toBeInTheDocument();
    });

    it('shows correct partner emoji for female', () => {
      renderCall();
      
      const emojiElement = screen.getByText('üë©');
      expect(emojiElement).toBeInTheDocument();
    });

    it('shows correct partner emoji for male', () => {
      mockUseCall.callState.partner = {
        ...mockUseCall.callState.partner!,
        gender: 'male'
      };
      
      renderCall();
      
      const emojiElement = screen.getByText('üë®');
      expect(emojiElement).toBeInTheDocument();
    });
  });

  describe('Error State', () => {
    beforeEach(() => {
      mockUseCall.callState = {
        ...mockUseCall.callState,
        status: 'error'
      };
    });

    it('renders error state correctly', () => {
      renderCall();
      
      expect(screen.getByText('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')).toBeInTheDocument();
      expect(screen.getByText('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: /–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/i })).toBeInTheDocument();
      expect(screen.getByRole('button', { name: /–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞/i })).toBeInTheDocument();
    });

    it('navigates to settings when settings button is clicked', () => {
      renderCall();
      
      const settingsButton = screen.getByRole('button', { name: /–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/i });
      fireEvent.click(settingsButton);
      
      expect(mockNavigate).toHaveBeenCalledWith('/settings');
    });

    it('calls startSearch when try again button is clicked', () => {
      renderCall();
      
      const tryAgainButton = screen.getByRole('button', { name: /–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞/i });
      fireEvent.click(tryAgainButton);
      
      expect(mockStartSearch).toHaveBeenCalledTimes(1);
    });
  });

  describe('Connected State', () => {
    beforeEach(() => {
      mockUseCall.callState = {
        ...mockUseCall.callState,
        status: 'connected',
        duration: 125,
        partner: {
          id: 2,
          name: 'Jane',
          age: 25,
          gender: 'female',
          interests: ['–º—É–∑—ã–∫–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Å–ø–æ—Ä—Ç']
        }
      };
    });

    it('renders connected state correctly', () => {
      renderCall();
      
      expect(screen.getByText('Jane, 25')).toBeInTheDocument();
      expect(screen.getByText('02:05')).toBeInTheDocument(); // duration
      expect(screen.getByText('–º—É–∑—ã–∫–∞')).toBeInTheDocument();
      expect(screen.getByText('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è')).toBeInTheDocument();
      expect(screen.getByText('—Å–ø–æ—Ä—Ç')).toBeInTheDocument();
    });

    it('handles mute toggle', () => {
      renderCall();
      
      const muteButton = screen.getByRole('button', { name: /–æ—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω/i });
      fireEvent.click(muteButton);
      
      expect(mockToggleMute).toHaveBeenCalledTimes(1);
    });

    it('handles speaker toggle', () => {
      renderCall();
      
      const speakerButton = screen.getByRole('button', { name: /–≤–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫/i });
      fireEvent.click(speakerButton);
      
      expect(mockToggleSpeaker).toHaveBeenCalledTimes(1);
    });

    it('handles end call', () => {
      renderCall();
      
      const endCallButton = screen.getByRole('button', { name: /–∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫/i });
      fireEvent.click(endCallButton);
      
      expect(mockEndCall).toHaveBeenCalledTimes(1);
      expect(mockNavigate).toHaveBeenCalledWith('/rate');
    });

    it('handles like partner', () => {
      renderCall();
      
      const likeButton = screen.getByRole('button', { name: /–Ω—Ä–∞–≤–∏—Ç—Å—è/i });
      fireEvent.click(likeButton);
      
      expect(mockLikePartner).toHaveBeenCalledTimes(1);
      expect(mockNavigate).toHaveBeenCalledWith('/rate');
    });

    it('handles pass partner', () => {
      renderCall();
      
      const passButton = screen.getByRole('button', { name: /–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å/i });
      fireEvent.click(passButton);
      
      expect(mockPassPartner).toHaveBeenCalledTimes(1);
      expect(mockNavigate).toHaveBeenCalledWith('/rate');
    });

    it('shows muted state correctly', () => {
      mockUseCall.callState.isMuted = true;
      
      renderCall();
      
      const muteButton = screen.getByRole('button', { name: /–≤–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω/i });
      expect(muteButton).toHaveClass('bg-destructive');
    });

    it('shows speaker on state correctly', () => {
      mockUseCall.callState.isSpeakerOn = true;
      
      renderCall();
      
      const speakerButton = screen.getByRole('button', { name: /–æ—Ç–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫/i });
      expect(speakerButton).toHaveClass('bg-secondary');
    });
  });

  describe('Mobile Interface', () => {
    beforeEach(() => {
      mockUseMobile.isMobile = true;
    });

    it('renders mobile interface on mobile devices', () => {
      renderCall();
      
      expect(screen.getByTestId('mobile-call-interface')).toBeInTheDocument();
    });

    it('does not render desktop interface on mobile', () => {
      renderCall();
      
      expect(screen.queryByText('–ì–æ—Ç–æ–≤—ã –∫ –∑–≤–æ–Ω–∫—É?')).not.toBeInTheDocument();
    });
  });

  describe('Time Formatting', () => {
    it('formats time correctly for different durations', () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é formatTime —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      mockUseCall.callState = {
        ...mockUseCall.callState,
        status: 'searching',
        searchTime: 65 // 1:05
      };
      
      renderCall();
      expect(screen.getByText('01:05')).toBeInTheDocument();
      
      mockUseCall.callState = {
        ...mockUseCall.callState,
        status: 'connected',
        duration: 3661 // 1:01:01
      };
      
      renderCall();
      expect(screen.getByText('01:01:01')).toBeInTheDocument();
    });
  });
}); 