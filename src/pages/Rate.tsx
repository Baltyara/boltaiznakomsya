import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Star, Heart, X, Loader2, MessageCircle } from "lucide-react";

interface RatingData {
  rating: number;
  feedback: string;
  action: 'like' | 'pass' | 'skip';
  partnerId?: string;
}

const Rate = () => {
  const navigate = useNavigate();
  const [ratingData, setRatingData] = useState<RatingData>({
    rating: 0,
    feedback: "",
    action: 'skip'
  });
  const [hoverRating, setHoverRating] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  // Mock partner data (in real app, this would come from call context)
  const partner = {
    name: "–ê–Ω–Ω–∞",
    age: 24,
    interests: ["–ú—É–∑—ã–∫–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–∏–Ω–æ"],
    gender: "female"
  };

  const handleRatingChange = (newRating: number) => {
    setRatingData(prev => ({ ...prev, rating: newRating }));
  };

  const handleFeedbackChange = (feedback: string) => {
    setRatingData(prev => ({ ...prev, feedback }));
  };

  const handleAction = (action: 'like' | 'pass') => {
    setRatingData(prev => ({ ...prev, action }));
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      // TODO: Send rating to backend
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log("Rating submitted:", ratingData);
      setSubmitted(true);
      
      // Navigate to next call after a short delay
      setTimeout(() => {
        navigate("/call");
      }, 2000);
    } catch (error) {
      console.error("Error submitting rating:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSkip = () => {
    navigate("/call");
  };

  const handleNewCall = () => {
    navigate("/call");
  };

  const getRatingText = (rating: number) => {
    switch (rating) {
      case 1: return "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ";
      case 2: return "–ü–ª–æ—Ö–æ";
      case 3: return "–ù–æ—Ä–º–∞–ª—å–Ω–æ";
      case 4: return "–•–æ—Ä–æ—à–æ";
      case 5: return "–û—Ç–ª–∏—á–Ω–æ!";
      default: return "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä";
    }
  };

  const getActionText = (action: string) => {
    switch (action) {
      case 'like': return "üî• –ï—â—ë —Ä–∞–∑";
      case 'pass': return "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å";
      default: return "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å";
    }
  };

  if (submitted) {
    return (
      <div className="min-h-screen bg-gradient-voice-subtle flex items-center justify-center p-4">
        <Card className="w-full max-w-md bg-card/80 backdrop-blur-sm border-voice-border">
          <CardContent className="pt-6">
            <div className="text-center space-y-6">
              <div className="w-24 h-24 mx-auto bg-gradient-voice rounded-full flex items-center justify-center text-4xl animate-voice-pulse">
                ‚ú®
              </div>
              <div>
                <h2 className="text-2xl font-display bg-gradient-voice bg-clip-text text-transparent mb-2">
                  –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!
                </h2>
                <p className="text-muted-foreground">
                  –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å
                </p>
              </div>
              <div className="flex justify-center">
                <Loader2 className="h-6 w-6 animate-spin text-voice-primary" />
              </div>
              <p className="text-sm text-muted-foreground">
                –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–≤–æ–Ω–∫—É...
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-voice-subtle flex items-center justify-center p-4">
      <Card className="w-full max-w-md bg-card/80 backdrop-blur-sm border-voice-border">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-display bg-gradient-voice bg-clip-text text-transparent">
            –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
          </CardTitle>
          <CardDescription>
            –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å, –æ—Ü–µ–Ω–∏–≤ –≤–∞—à–µ –æ–±—â–µ–Ω–∏–µ
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Partner Info */}
          <div className="text-center space-y-3">
            <div className="w-16 h-16 mx-auto bg-gradient-voice rounded-full flex items-center justify-center text-2xl">
              {partner.gender === "female" ? "üë©" : "üë®"}
            </div>
            <div>
              <h3 className="font-semibold">{partner.name}, {partner.age}</h3>
              <div className="flex flex-wrap gap-1 justify-center mt-1">
                {partner.interests.map((interest) => (
                  <Badge key={interest} variant="secondary" className="text-xs">
                    {interest}
                  </Badge>
                ))}
              </div>
            </div>
          </div>

          {/* Success Icon */}
          <div className="text-center">
            <div className="w-20 h-20 mx-auto bg-gradient-voice rounded-full flex items-center justify-center text-4xl mb-4 animate-voice-pulse">
              ‚ú®
            </div>
            <p className="text-muted-foreground">
              –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –æ–±—â–µ–Ω–∏–µ —Å {partner.name}?
            </p>
          </div>

          {/* Star Rating */}
          <div className="text-center">
            <p className="text-sm font-medium mb-3">{getRatingText(ratingData.rating)}</p>
            <div className="flex justify-center gap-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  className="p-1 hover:scale-110 transition-transform"
                  onMouseEnter={() => setHoverRating(star)}
                  onMouseLeave={() => setHoverRating(0)}
                  onClick={() => handleRatingChange(star)}
                >
                  <Star
                    className={`h-8 w-8 ${
                      star <= (hoverRating || ratingData.rating)
                        ? "fill-voice-primary text-voice-primary"
                        : "text-muted-foreground"
                    }`}
                  />
                </button>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="space-y-3">
            <p className="text-sm font-medium text-center">–ß—Ç–æ –¥–∞–ª—å—à–µ?</p>
            <div className="flex gap-2">
              <Button
                variant={ratingData.action === 'pass' ? "destructive" : "outline"}
                onClick={() => handleAction('pass')}
                className="flex-1"
              >
                <X className="mr-2 h-4 w-4" />
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </Button>
              <Button
                variant={ratingData.action === 'like' ? "voice" : "outline"}
                onClick={() => handleAction('like')}
                className="flex-1"
              >
                <Heart className="mr-2 h-4 w-4" />
                –ï—â—ë —Ä–∞–∑
              </Button>
            </div>
          </div>

          {/* Feedback */}
          <div className="space-y-2">
            <label className="text-sm font-medium">
              –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <Textarea
              placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ..."
              value={ratingData.feedback}
              onChange={(e) => handleFeedbackChange(e.target.value)}
              className="min-h-[80px] resize-none"
              maxLength={200}
            />
            <p className="text-xs text-muted-foreground text-right">
              {ratingData.feedback.length}/200
            </p>
          </div>

          {/* Submit Button */}
          <Button
            variant="voice"
            onClick={handleSubmit}
            disabled={ratingData.rating === 0 || isSubmitting}
            className="w-full"
          >
            {isSubmitting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –û—Ç–ø—Ä–∞–≤–∫–∞...
              </>
            ) : (
              <>
                <MessageCircle className="mr-2 h-4 w-4" />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
              </>
            )}
          </Button>

          {/* Skip Button */}
          <Button
            variant="outline"
            onClick={handleSkip}
            disabled={isSubmitting}
            className="w-full"
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É
          </Button>

          {/* Continue Button */}
          <Button
            variant="secondary"
            onClick={handleNewCall}
            disabled={isSubmitting}
            className="w-full"
          >
            –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default Rate;